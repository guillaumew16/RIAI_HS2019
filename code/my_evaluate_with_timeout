#!/bin/bash

# evaluates on generated test cases.

usage="Usage: my_evaluate_with_timeout <network> <timeout> (in seconds).\n
	\tnetwork: 'all', or one of 'fc1' 'fc2' 'fc3' 'fc4' 'fc5' 'conv1' 'conv2' 'conv3' 'conv4' 'conv5'\n
	\tNote that the timeout used for official evaluation will be 120 seconds."

if [[ $# -ne 2 ]]; then
	echo -e ${usage}
	exit
fi
netarg=$1
case ${netarg} in
    all|fc1|fc2|fc3|fc4|fc5|conv1|conv2|conv3|conv4|conv5) true ;;
    *)             echo -e ${usage}; exit ;;
esac
t=$2

if [[ ${netarg} == "all" ]]; then
	netarg="fc1 fc2 fc3 fc4 fc5 conv1 conv2 conv3 conv4 conv5"
fi

for net in ${netarg}
do
	echo "Evaluating network ${net}..."

	# echo -e "\tOn given test cases"
	# for spec in `ls ../test_cases/${net}`
	# do
	# 	echo -ne "\t\t${spec}: \t"
	# 	timeout ${t}s python verifier.py --net ${net} --spec ../test_cases/${net}/${spec} || echo "not verified"
	# done

	# echo -e "\tOn \"maybe robust\" test cases (should \"maybe\" output 'verified')"
	# for spec in `ls ../test_cases_generated/${net}/maybe_robust`
	# do
	# 	echo -ne "\t\t${spec}: \t"
	# 	timeout ${t}s python verifier.py --net ${net} --spec ../test_cases_generated/${net}/maybe_robust/${spec} || echo "not verified"
	# done

	echo -e "\tOn verifiable test cases (should output 'verified')"
	for spec in `ls ../test_cases_generated/${net}/verifiable`
	do
		echo -ne "\t\t${spec}: \t"
		timeout ${t}s python verifier.py --net ${net} --spec ../test_cases_generated/${net}/verifiable/${spec} || echo "not verified"
	done

	echo -e "\tOn non-robust test cases (should output 'not verified')"
	for spec in `ls ../test_cases_generated/${net}/not_robust`
	do
		echo -ne "\t\t${spec}: \t"
		timeout ${t}s python verifier.py --net ${net} --spec ../test_cases_generated/${net}/not_robust/${spec} || echo "not verified"
	done
done
